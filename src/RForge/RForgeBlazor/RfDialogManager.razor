@using RForgeBlazor.Services
@using System.ComponentModel.DataAnnotations

@implements IDisposable

@if (ActiveDialog != null)
{
    switch (ActiveDialog.DialogType)
    {
        case RfDialogType.Alert:
            RfDialogOptionAlert alertOptions = ActiveDialog as RfDialogOptionAlert;

            <RfModal IsVisible="true" ShowCloseButton="false" Width="30rem">
                <div class="block">
                    @alertOptions.Message
                </div>
                <div class="buttons is-right">
                    <button class="button is-primary @IsLoadingCss" @onclick="@OnConfirmClick">@alertOptions.ConfirmText</button>
                </div>
            </RfModal>

            break;
        case RfDialogType.Confirm:
            RfDialogOptionConfirm confirmOptions = ActiveDialog as RfDialogOptionConfirm;

            <RfModal IsVisible="true" ShowCloseButton="false" Width="30rem">
                <div class="block">
                    @confirmOptions.Message
                </div>
                <div class="buttons is-right">
                    <button class="button is-primary @IsLoadingCss" @onclick="@OnConfirmClick">@confirmOptions.ConfirmText</button>
                    <button class="button @IsLoadingCss" @onclick="@OnCancelClick">@confirmOptions.CancelText</button>
                </div>
            </RfModal>
            break;
        case RfDialogType.Prompt:
            RfDialogOptionPrompt promptOptions = ActiveDialog as RfDialogOptionPrompt;

            <RfModal IsVisible="true" ShowCloseButton="false">
                <div class="block">
                    @promptOptions.Message
                </div>
                <EditForm EditContext=@EditContext OnValidSubmit="@OnConfirmClick">
                    <DataAnnotationsValidator />
                    <div class="field">
                        <div class="control">
                            <InputText class="input" @bind-Value="@PromptFormData.Input" />
                        </div>
                        <p class="help is-danger"><ValidationMessage For="() => PromptFormData.Input" /></p>
                    </div>
                    <div class="buttons is-right">
                        <button class="button is-primary @IsLoadingCss" type="submit">@promptOptions.ConfirmText</button>
                        <button class="button @IsLoadingCss" @onclick="@OnCancelClick" type="button">@promptOptions.CancelText</button>
                    </div>
                </EditForm>
            </RfModal>
            break;
    }
}

@code {

    public static RenderFragment MessageOnly(string message) => __builder =>
    {
        @message
    };

    public static RenderFragment MessageAndTitle((string Message, string Title) notification) => __builder =>
    {
        <div class="block is-size-4"><strong>@notification.Title</strong></div>
        @notification.Message
    };
}