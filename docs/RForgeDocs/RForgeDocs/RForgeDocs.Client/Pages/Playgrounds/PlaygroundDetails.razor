@using RForgeDocs.Client.Components

@if (PageSourceUrl != null)
{
    <HeroSection Title="@Title" SubTitle="@SubTitle">

        <HeroFooter>
            <div class="container has-text-right">
                <a class="button is-primary mb-3" href="@PageSourceUrl">
                    <span>Page Source Code</span>
                    <span class="icon">
                        <i class="fas fa-up-right-from-square"></i>
                    </span>
                </a>
            </div>
        </HeroFooter>

    </HeroSection>
}
else
{
    <HeroSection Title="@Title" SubTitle="@SubTitle" />
}

<div class="container">
    <div class="breadcrumb mt-2" aria-label="breadcrumbs">
        <ul>
            <li><a href="/">RForge</a></li>
            <li><a href="/component-listing">Components</a></li>
            <li><a href="@ComponentDetailsUrl">@ComponentName</a></li>
            <li class="is-active"><a href="#" aria-current="page">Playground</a></li>
        </ul>
    </div>

    <div class="columns">
        <div class="column is-4">
            <div class="message">
                <p class="message-header">Parameters</p>
                <div class="message-body">
                    @Parameters
                </div>
            </div>
        </div>

        <div class="column">
            <article class="seciton">
                @Display
            </article>

            @if (HasEvents == true)
            {
                <div class="buttons is-right">
                    <a class="button">Clear Logs</a>
                </div>

                <div class="field">
                    <label class="label">Event Log</label>
                    <div class="control">
                        <textarea class="textarea"
                                  placeholder="Event Log"
                                  readonly="readonly"
                                  rows="15">@log</textarea>
                    </div>
                </div>
            }
        </div>


    </div>


</div>


@code {

    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string SubTitle { get; set; }

    [Parameter]
    public string PageSourceUrl { get; set; }

    [Parameter]
    public string ComponentDetailsUrl { get; set; }

    [Parameter]
    public string ComponentName { get; set; }

    [Parameter]
    public RenderFragment Parameters { get; set; }

    [Parameter]
    public RenderFragment Display { get; set; }

    [Parameter]
    public bool HasEvents { get; set; } = true;

    private string log { get; set; }

    public void ClearLog() => log = string.Empty;

    public void AddLog(string message, bool addTimeStamp = true)
    {
        if (addTimeStamp == true)
        {
            string dateStamp = $"[{DateTime.Now:T}]";

            if (string.IsNullOrEmpty(log) == true)
                log = dateStamp;
            else
                log += $"\n{dateStamp}";
        }

        if (string.IsNullOrEmpty(log) == true)
            log = message;

        else if (message.StartsWith('\n') == true)
            log += message;

        else log += "\n" + message;
    }

}
