@using RForgeBlazor.Services
@using System.ComponentModel.DataAnnotations

@implements IDisposable

@if (ActiveDialog != null)
{
    switch (ActiveDialog.DialogType)
    {
        case RfDialogType.Alert:
            RfDialogOptionAlert alertOptions = ActiveDialog as RfDialogOptionAlert;

            <RfModal IsVisible="true" ShowCloseButton="false" Width="30rem">
                <div class="block">
                    @alertOptions.Message
                </div>
                <div class="buttons is-right">
                    <button class="button is-primary @IsLoadingCss" @onclick="@OnConfirmClick">@alertOptions.ConfirmText</button>
                </div>
            </RfModal>

            break;
        case RfDialogType.Confirm:
            RfDialogOptionConfirm confirmOptions = ActiveDialog as RfDialogOptionConfirm;

            <RfModal IsVisible="true" ShowCloseButton="false" Width="30rem">
                <div class="block">
                    @confirmOptions.Message
                </div>
                <div class="buttons is-right">
                    <button type="button" class="button is-primary @IsLoadingCss" @onclick="@OnConfirmClick">@confirmOptions.ConfirmText</button>
                    <button type="button" class="button @IsLoadingCss" @onclick="@OnCancelClick">@confirmOptions.CancelText</button>
                </div>
            </RfModal>
            break;
        case RfDialogType.Prompt:
            RfDialogOptionPrompt promptOptions = ActiveDialog as RfDialogOptionPrompt;

            <RfModal IsVisible="true" ShowCloseButton="false">
                <div class="block">
                    @promptOptions.Message
                </div>
                <EditForm EditContext=@EditContext OnValidSubmit="@OnConfirmClick">
                    <DataAnnotationsValidator />
                    <div class="field">
                        <div class="control">
                            <InputText class="input" @bind-Value="@PromptFormData.Input" />
                        </div>
                        <p class="help is-danger"><ValidationMessage For="() => PromptFormData.Input" /></p>
                    </div>
                    <div class="buttons is-right">
                        <button class="button is-primary @IsLoadingCss" type="submit">@promptOptions.ConfirmText</button>
                        <button class="button @IsLoadingCss" @onclick="@OnCancelClick" type="button">@promptOptions.CancelText</button>
                    </div>
                </EditForm>
            </RfModal>
            break;
        case RfDialogType.MulitAction:
            RfDialogOptionMultiAction multiActionOptions = ActiveDialog as RfDialogOptionMultiAction;
            MultiActionLayoutData layoutData = new(multiActionOptions);
            layoutData.BuildOutLayout();
            <RfModal IsVisible="true" ShowCloseButton="false" Width="30rem">
                <div class="block">
                    @multiActionOptions.Message
                </div>
                <div class="@layoutData.ContainerCss">
                    @foreach (var placementGroup in multiActionOptions.Actions
                        .GroupBy(a => a.Placement)
                        .OrderBy(pg => pg.Key))
                    {

                        @if (layoutData.HasSubContainers == true)
                        {
                            string subContainerCss = "is-flex-shrink-0";
                            if (placementGroup.Key == RfPlacement.Center)
                            {
                                subContainerCss = "is-flex-grow-1 is-centered";
                            }
                            <div class="buttons mb-0 @subContainerCss">
                                @foreach (var action in placementGroup)
                                {
                                    <button class="button @action.CssClass @IsLoadingCss"
                                            disabled=@action.IsDisabled
                                            type="button"
                                            @onclick=@(async () => await OnMultiActionClick(action))>
                                        @RenderActionButton(action)
                                    </button>
                                }
                            </div>
                        }
                        else
                        {
                            @foreach (var action in placementGroup)
                            {
                                <button class="button @action.CssClass @IsLoadingCss"
                                        disabled=@action.IsDisabled
                                        type="button"
                                        @onclick=@(async () => await OnMultiActionClick(action))>
                                    @RenderActionButton(action)
                                </button>
                            }
                        }
                    }
                </div>
            </RfModal>
            break;
    }
}

@code {

    public static RenderFragment MessageOnly(string message) => __builder =>
    {
        @message
    };

    public static RenderFragment MessageAndTitle((string Message, string Title) notification) => __builder =>
    {
        <div class="block is-size-4"><strong>@notification.Title</strong></div>
        @notification.Message
    };

    private static RenderFragment RenderActionButton(RForge.Abstractions.Modal.RfDialogMultiActionButtonOptions action) => __builder =>
    {

        @if (string.IsNullOrEmpty(action.Icon) == false)
        {
            if (string.IsNullOrWhiteSpace(action.Text) == true)
            {
                <span class="icon @action.IconWrapperCss">
                    <i class="@action.Icon"></i>
                </span>
            }
            else
            {
                if (action.IconOnLeft == true)
                {
                    <span class="icon @action.IconWrapperCss">
                        <i class="@action.Icon"></i>
                    </span>
                    <span>@action.Text</span>
                }
                else
                {
                    <span>@action.Text</span>
                    <span class="icon @action.IconWrapperCss">
                        <i class="@action.Icon"></i>
                    </span>
                }
            }
        }
        else
        {
            @action.Text
        }
    };

}