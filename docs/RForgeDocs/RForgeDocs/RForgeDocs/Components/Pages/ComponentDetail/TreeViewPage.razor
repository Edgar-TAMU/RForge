@page "/treeview/details"

<ComponentDetail Title="Tree View"
                 PlaygroundUrl="/treeview/playground"
                 SubTitle="A tree view making use of a vertical menu">

    <CustomSideLinks>

        <div class="menu">
            <p class="menu-label is-size-6 mb-2">Repository Links</p>
            <ul class="menu-list">
                @ComponentDetail.SideLink(("RfTreeView.razor", TagInfo.Razor, "https://github.com/Rumhyek/RForge/blob/main/src/RForge/RForgeBlazor/RfTreeView.razor"))
                @ComponentDetail.SideLink(("RfTreeView.razor.cs", TagInfo.Backend, "https://github.com/Rumhyek/RForge/blob/main/src/RForge/RForgeBlazor/RfTreeView.razor.cs"))
                @ComponentDetail.SpacerLink()
                @ComponentDetail.SideLink(("TreeViewBaseContext.cs", TagInfo.Library, "https://github.com/Rumhyek/RForge/blob/main/src/RForge/RForgeBlazor/Models/TreeViewBaseContext.cs"))
                @ComponentDetail.SideLink(("TreeViewContext.cs", TagInfo.Library, "https://github.com/Rumhyek/RForge/blob/main/src/RForge/RForgeBlazor/Models/TreeViewContext.cs"))
            </ul>
        </div>

        <div class="menu mt-5">
            <p class="menu-label">Child Components</p>
            <ul class="menu-list">
                @ComponentDetail.SideLink(("RfTreeList.razor", TagInfo.Razor, "https://github.com/Rumhyek/RForge/blob/main/src/RForge/RForgeBlazor/RfTreeList.razor"))
                @ComponentDetail.SideLink(("RfTreeList.razor.cs", TagInfo.Backend, "https://github.com/Rumhyek/RForge/blob/main/src/RForge/RForgeBlazor/RfTreeList.razor.cs"))
                @ComponentDetail.SpacerLink()
                @ComponentDetail.SideLink(("RfTreeLabel.razor", TagInfo.Razor, "https://github.com/Rumhyek/RForge/blob/main/src/RForge/RForgeBlazor/RfTreeLabel.razor"))
                @ComponentDetail.SideLink(("RfTreeLabel.razor.cs", TagInfo.Backend, "https://github.com/Rumhyek/RForge/blob/main/src/RForge/RForgeBlazor/RfTreeLabel.razor.cs"))
                @ComponentDetail.SpacerLink()
                @ComponentDetail.SideLink(("RfTreeNode.razor", TagInfo.Razor, "https://github.com/Rumhyek/RForge/blob/main/src/RForge/RForgeBlazor/RfTreeNode.razor"))
                @ComponentDetail.SideLink(("RfTreeNode.razor.cs", TagInfo.Backend, "https://github.com/Rumhyek/RForge/blob/main/src/RForge/RForgeBlazor/RfTreeNode.razor.cs"))
                @ComponentDetail.SpacerLink()
            </ul>
        </div>

        <div class="menu mt-4">
            <p class="menu-label is-size-6 mb-2">Examples</p>
            <ul class="menu-list">
                @ComponentDetail.SideLink(("Basic Example", TagInfo.Empty, "/data-grid/example/basic-example"))

            </ul>
        </div>
    </CustomSideLinks>
    <Purpose>
        <div class="content">
            <p>
                <code>RfTreeView</code> was added to RForge to support tree like data structures.
                It can be used as a folder traversal tool, simple side menu, basic accordian, etc.
            </p>
            <div class="notification">
                <strong>NOTE:</strong> Eventually an accordian component will be added as a simplified / streamline way.
            </div>
        </div>
    </Purpose>

    <BasicUsage>
        <div class="content">
            <p>
                <code>RfTreeView</code> is built upon Bulma's <a href="https://bulma.io/documentation/components/menu/"><code>.menu</code></a> component.
                With that the naming of sub components for <code>RfTreeView</code> should match the naming convention of the Bulma menu.
                For example: Use <code>RfTreeViewLabel</code> to add a <code>.menu-label</code>.
            </p>

            <p>
                Below shows the hierarchical of sub components including when to use which.
            </p>

            <pre><code>RfTreeView                
↳ RfTreeLabel
  RfTreeList
  ↳ RfTreeNode
    ↳ RfTreeNode
      RfTreeNode
    RfTreeNode
</code></pre>

            <h2>Label / Heading</h2>

            <p>
                Use <code>RfTreeLabel</code> to create a heading within the tree view.
                These can be nested within a <code>RfTreeList</code> or <code>RfTreeNode</code>, but look best as a direct child of <code>RfTreeView</code>.
            </p>

            <p>
                <code>RfTreeLabel</code> wraps the child content of it within a <code>p.menu-label</code>
                and supports <code>CssClass</code> parameter which is applied to the wrapping <code>p</code> tag.
            </p>

            <p>
                <code>RfTreeLabel</code> will automatically render as a skeleton variant if added within <code>RfTreeView.PrerenderNodes</code>
                applying the same Css Classes. You can provide text for the label or leave it empty. If provided the text will be rendered and will grow the skeleton to fit the text.
            </p>
            <h3>Example:</h3>
            <pre><code>&lt;RfTreeView&gt;
    &lt;PrerenderNodes&gt;
        &lt;RfTreeLabel CssClass="is-size-4"&gt;Root Label&lt;/RfTreeLabel&gt;
        &lt;RfTreeLabel /&gt;
        ....
    &lt;/PrerenderNodes&gt;
    &lt;Nodes&gt;
        &lt;RfTreeLabel CssClass="is-size-4"&gt;Root Label&lt;/RfTreeLabel&gt;
        &lt;RfTreeLabel&gt;Some other Label&lt;/RfTreeLabel&gt;
        ....
    &lt;/Nodes&gt;
&lt;/RfTreeView&gt;</code></pre>

            <h2>RfTreeList</h2>

            <p>
                Use <code>RfTreeList</code> to wrap the root node.
                The purpose of this component is to create the initial <code>ul.menu-list</code> element.
            </p>
            <p>
                <code>RfTreeList</code> supports one paramater <code>CssClass</code>.
                Use this parameter to add additioanl classes to the wrapping <code>u.menu-list</code>.
            </p>

            <h3>Example:</h3>
            <pre><code>&lt;RfTreeView&gt;
    &lt;Nodes&gt;
        &lt;RfTreeList&gt;
            ... RfTreeNode(s) ...
        &lt;/RfTreeList&gt;
    &lt;/Nodes&gt;
&lt;/RfTreeView&gt;</code></pre>

            <h2>Tree Nodes</h2>

            <p>
                <code>RfTreeNode</code> is how to add an interative, selectable, and expandable element to <code>RfTreeView</code>.
            </p>

            <h3>Parameters</h3>

        </div>
        <div class="block">
            <h5 class="subtitle mb-2">TTreeItemData</h5>
            <div class="tags mb-2">
                <span class="tag is-info">generic</span> <span class="tag">Required</span>
            </div>
            <p>A generic type to use as part of event callbacks.</p>
        </div>

        <div class="block">
            <h5 class="subtitle mb-2 has-text-bold">TTreeItemData</h5>
            <div class="mb-2">
                <span class="tag">generic</span> - <span class="tag is-primary">Required</span>
            </div>
            <p>A generic type to use as part of event callbacks.</p>
        </div>

        <table class="table is-fullwidth">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Attributes</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>TTreeItemData</code></td>
                    <td><span class="tag">generic</span></td>
                    <td>
                        <span class="tag is-primary">Required</span>
                    </td>
                    <td>A generic type to use as part of event callbacks.</td>
                </tr>
                <tr>
                    <td><code>NodeData</code></td>
                    <td><span class="tag">TTreeItemData</span></td>
                    <td>
                    </td>
                    <td>The custom data used to represent this node. Will be passed into <code>OnNodeClick</code></td>
                </tr>
                <tr>
                    <td><code>IsSelected</code></td>
                    <td><span class="tag">bool</span></td>
                    <td>
                        <span class="tag is-success" title="supports two way binding.">@@bind</span>
                    </td>
                    <td>If true the node will apply <code>.is-active</code> to the node.</td>
                </tr>
                <tr>
                    <td><code>Name</code></td>
                    <td><span class="tag">bool</span></td>
                    <td>
                        <span class="tag is-primary">Required</span>
                        <span class="tag is-success" title="supports two way binding.">@@bind</span>
                    </td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td><code>Name</code></td>
                    <td><span class="tag">bool</span></td>
                    <td>
                        <span class="tag is-primary">Required</span>
                        <span class="tag is-success" title="supports two way binding.">@@bind</span>
                    </td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td><code>Name</code></td>
                    <td><span class="tag">bool</span></td>
                    <td>
                        <span class="tag is-primary">Required</span>
                        <span class="tag is-success" title="supports two way binding.">@@bind</span>
                    </td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td><code>Name</code></td>
                    <td><span class="tag">bool</span></td>
                    <td>
                        <span class="tag is-primary">Required</span>
                        <span class="tag is-success" title="supports two way binding.">@@bind</span>
                    </td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td><code>Name</code></td>
                    <td><span class="tag">bool</span></td>
                    <td>
                        <span class="tag is-primary">Required</span>
                        <span class="tag is-success" title="supports two way binding.">@@bind</span>
                    </td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td><code>Name</code></td>
                    <td><span class="tag">bool</span></td>
                    <td>
                        <span class="tag is-primary">Required</span>
                        <span class="tag is-success" title="supports two way binding.">@@bind</span>
                    </td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td><code>Name</code></td>
                    <td><span class="tag">bool</span></td>
                    <td>
                        <span class="tag is-primary">Required</span>
                        <span class="tag is-success" title="supports two way binding.">@@bind</span>
                    </td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td><code>Name</code></td>
                    <td><span class="tag">bool</span></td>
                    <td>
                        <span class="tag is-primary">Required</span>
                        <span class="tag is-success" title="supports two way binding.">@@bind</span>
                    </td>
                    <td>Description</td>
                </tr>
                <tr>
                    <td><code>Name</code></td>
                    <td><span class="tag">bool</span></td>
                    <td>
                        <span class="tag is-primary">Required</span>
                        <span class="tag is-success" title="supports two way binding.">@@bind</span>
                    </td>
                    <td>Description</td>
                </tr>

            </tbody>
        </table>
        <div class="content">

        </div>
    </BasicUsage>

    <Setup>
        <BasicSetupDetails />
    </Setup>
</ComponentDetail>


