@page "/dropdown-single/details"

<ComponentDetail Title="Dropdown (Single)"
                 PlaygroundUrl="/dropdown-single/playground"
                 SubTitle="A searchable drop down with one selection">

    <Examples>
        @ComponentDetail.SideLink(("String example", "/dropdown-single/example/string-example"))
        @ComponentDetail.SideLink(("Object example", "/dropdown-single/example/object-example"))

    </Examples>

    <RepoLinks>
        @ComponentDetail.SideLink(("RfDropDown.razor", "https://github.com/Rumhyek/RForge/blob/main/src/RForge/RForgeBlazor/RfDropDown.razor"))
        @ComponentDetail.SideLink(("RfDropDown.razor.cs", "https://github.com/Rumhyek/RForge/blob/main/src/RForge/RForgeBlazor/RfDropDown.razor.cs"))
        @ComponentDetail.SideLink(("RfDropDownBase.cs", "https://github.com/Rumhyek/RForge/blob/main/src/RForge/RForgeBlazor/Models/RfDropDownBase.cs"))
        @ComponentDetail.SideLink(("RfDropDownPosition.cs", "https://github.com/Rumhyek/RForge/blob/main/src/RForge/RForge.Abstractions/DropDowns/RfDropDownPosition.cs"))
    </RepoLinks>
    
    <Purpose>
        <div class="content">

            <p>
                <code>RfDropDown</code> creates a Bulma dropdown that supports searching and manages the selection of an item.
            </p>

            <h4>When to Use</h4>
            <p>
                Use <code>RfDropDown</code> when you need to create a custom modal but don't need to recreate
                the visibility code again.
            </p>

            <h4>When not to Use</h4>
            <p>Don't use <code>RfDropDown</code> when:</p>
            <ul>
                <li>
                    When using static rendering mode. Instead use <code>InputSelect</code>.
                </li>
            </ul>
        </div>
    </Purpose>

    <BasicUsage>
        <div class="content">
            <p>
                The <code>RfDropDown</code> works primarily with two parameters: <code>SelectedItem</code> and <code>Items</code>.
            </p>

            <h3>How are Items Render?</h3>
            <p>
                The dropdown doesn't make any assumptions on how to render the items or selected item it is given. 
                Instead the drop down supports three <code>RenderFragement</code> to customize the way an item appears within the drop down.
                All three <code>RenderFragement</code> have a context of <code>TItem</code> and are used to setup two sections.
                The two sections of the drop down that can be custimized are <code>RowItemTemplate</code> and <code>SelectedItemTemplate</code>.
            </p>

            <h5>Row Item Template</h5>
            <p>
                The <code>RowItemTempalte</code> directly sets each row or option of the drop down. Each row is wrapped in the following code:
                <pre><code><xmp><a class="dropdown-item">@@RowItemTemplate(item)</a></xmp></code></pre>

                If <code>RowItemTemplate</code> isn't set the drop down will use <code>ChildContent</code>.
            </p>

            <h5>Selected Item Template</h5>
            <p>
                When the drop down has a selection it calls the <code>SelectedItemTemplate</code> to render the <code>TItem</code> within the input portion of the drop down. 
                Each row is wrapped in the following code:
                <pre><code><xmp><span>@@SelectedItemTemplate(SelectedItem)</span></xmp></code></pre>

                If <code>SelectedItemTemplate</code> isn't set the drop down will use <code>ChildContent</code>.
            </p>

        </div>
    </BasicUsage>

    <Setup>
        <BasicSetupDetails />
    </Setup>
</ComponentDetail>

@code {

}
