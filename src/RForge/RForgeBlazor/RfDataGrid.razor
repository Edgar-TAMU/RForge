@using RForge.Abstractions.DataGrids
@using RForgeBlazor.Models

@implements IDisposable
@typeparam TRowData


<CascadingValue Value="GridContext" IsFixed=true>
    @if (Data == null)
    {
        <table class="@ComputedTableCss">
            @if (Headers != null || Filters != null)
            {
                <thead>
                    @if (Headers != null)
                    {
                        <tr>
                            @for (int i = 0; i < PreRenderColumnCount; i++)
                            {
                                <th>
                                    <div class="skeleton-lines">
                                        <div></div>
                                    </div>
                                </th>
                            }
                        </tr>
                    }
                    @if (Filters != null && AllowFilters == true)
                    {
                        <tr class="filter-row">
                            @for (int i = 0; i < PreRenderColumnCount; i++)
                            {
                                <th>
                                    <input class="input is-skeleton is-small">
                                </th>
                            }
                        </tr>
                    }
                </thead>
            }
            @if (Cells != null)
            {
                <tbody>
                    @for (int r = 0; r < PreRenderRowCountValue; r++)
                    {
                        <tr>
                            @for (int c = 0; c < PreRenderColumnCount; c++)
                            {
                                <td>
                                    <div class="skeleton-lines">
                                        <div></div>
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            }
        </table>
        <div class="is-flex gap-3 is-justify-content-space-between is-align-items-center">
            <div>
                @if (ShowPaging == true)
                {
                    int totalPills = MaxPagingOptions + 4;
                    int currentPill = (int)Math.Floor(totalPills / 2f);

                    <div class="is-flex gap-1">
                        @for (int i = 0; i < totalPills; i++)
                        {
                            string css = null;
                            if (i == currentPill)
                            {
                                css = "current";
                            }
                            <div class="page-option @css skeleton"></div>
                        }
                    </div>
                }
            </div>
            <div class="page-count skeleton"> </div>
        </div>
    }
    else
    {
        <table class="@ComputedTableCss">
            <thead>
                @if (Headers != null)
                {
                    <tr>
                        @Headers
                    </tr>
                }
                @if (AllowFilters == true && Filters != null)
                {
                    <tr class="filter-row">
                        @Filters
                    </tr>
                }
            </thead>
            <tbody>
                @if (Data != null)
                {
                    @foreach (var row in Data)
                    {
                        var rowCss = "";
                        if (AllowSelection == true && currentSelection.Contains(row) == true)
                        {
                            rowCss += "selected is-primary";
                        }

                        <tr class="@rowCss" @onclick=@(async ()=> await OnRowClick(row))>
                            @Cells(row)
                        </tr>
                    }

                    
                    @if(Data.Any() == false)
                    {
                        <tr class="@EmptyContentCss">
                            @EmptyContent
                        </tr>
                    }
                }
            </tbody>
        </table>
        <div class="is-flex gap-3 is-justify-content-space-between is-align-items-center @PagerCssClass">
            <div>
                @if (ShowPaging == true)
                {
                    var pagingTabs = PagingTabs;
                    <div class="is-flex">
                        <div class="button" @onclick="@OnFirstPageClick">
                            <span class="icon">
                                <i class="fa-solid fa-angles-left"></i>
                            </span>
                        </div>
                        <div class="button" @onclick="@OnPreviousPageClick">
                            <span class="icon">
                                <i class="fa-solid fa-angle-left"></i>
                            </span>
                        </div>
                        @foreach (var pageIndex in pagingTabs)
                        {
                            string css = null;
                            if (pageIndex == CurrentPageIndex)
                            {
                                css = "is-primary";
                            }

                            <div class="button @css" @onclick=@(async () => await OnPageIndexClick(pageIndex))>
                                @(pageIndex + 1)
                            </div>

                        }
                        <div class="button" @onclick="@OnNextPageClick">
                            <span class="icon">
                                <i class="fa-solid fa-angle-right"></i>
                            </span>
                        </div>
                        <div class="button" @onclick="@OnLastPageClick">
                            <span class="icon">
                                <i class="fa-solid fa-angles-right"></i>
                            </span>
                        </div>
                    </div>
                }
            </div>
            <div class="text-secondary page-count">

                @if (ShowPaging == true)
                {
                    <text>Page @(CurrentPageIndex + 1) of @TotalPages (@TotalCount.ToString("#,##0") items)</text>
                }
                else
                {
                    <text>@TotalCount.ToString("#,##0") items</text>
                }
            </div>
        </div>
    }
</CascadingValue>


