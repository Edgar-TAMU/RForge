@page "/data-grid"
@using RForge.Abstractions
@using RForgeBlazor

@rendermode InteractiveAuto

@inject IGetFakeUsers getFakeUsers

<h1 class="title">Data Grid test</h1>

<RfDataGrid
            TRowData="UserRowData"
            @bind-SortKey=DataGrid1.SortKey
            @bind-SortOrder=DataGrid1.SortOrder
            @bind-CurrentPageIndex=DataGrid1.CurrentPageIndex
            TotalCount=DataGrid1.TotalCount
            AllowFilters=true
            Data=DataGrid1.Users
            AllowSelection=true
            PageSize=DataGrid1.PageSize
            OnLoadData="@LoadData1">

    <Headers>
        <RfDgHeader SortKey="Id">Id</RfDgHeader>
        <RfDgHeader SortKey="FirstName">First Name</RfDgHeader>
        <RfDgHeader SortKey="LastName">Last Name</RfDgHeader>
        <RfDgHeader SortKey="Email">Email</RfDgHeader>
    </Headers>

    <Filters>
        <RfDgFilterInputInt @bind-Value=DataGrid1.Filters.Id />
        <RfDgFilterInputText @bind-Value=DataGrid1.Filters.FirstName />
        <RfDgFilterInputText @bind-Value=DataGrid1.Filters.LastName />
        <RfDgFilterInputText @bind-Value=DataGrid1.Filters.Email />
    </Filters>

    <Cells>
        <td>@context.Id</td>
        <td>@context.FirstName</td>
        <td>@context.LastName</td>
        <td>@context.Email</td>
    </Cells>
    <EmptyContent>
        <td colspan="4">Could not find any Users</td>
    </EmptyContent>
</RfDataGrid>


<h2 class="title is-size-3">Double Click Test (Users2)</h2>

<RfDataGrid TRowData="UserRowData"
            @bind-SortKey=DataGrid2.SortKey
            @bind-SortOrder=DataGrid2.SortOrder
            @bind-CurrentPageIndex=DataGrid2.CurrentPageIndex
            TotalCount=DataGrid2.TotalCount
            AllowFilters=true
            Data=DataGrid2.Users
            AllowSelection=true
            PageSize=DataGrid2.PageSize
            OnRowDoubleClick=@OnRowDoubleClick
            OnLoadData="@LoadData2">

    <Headers>
        <RfDgHeader SortKey="Id">Id</RfDgHeader>
        <RfDgHeader SortKey="FirstName">First Name</RfDgHeader>
        <RfDgHeader SortKey="LastName">Last Name</RfDgHeader>
        <RfDgHeader SortKey="Email">Email</RfDgHeader>
    </Headers>

    <Filters>
        <RfDgFilterInputInt @bind-Value=DataGrid2.Filters.Id />
        <RfDgFilterInputText @bind-Value=DataGrid2.Filters.FirstName />
        <RfDgFilterInputText @bind-Value=DataGrid2.Filters.LastName />
        <RfDgFilterInputText @bind-Value=DataGrid2.Filters.Email />
    </Filters>

    <Cells>
        <td>@context.Id</td>
        <td>@context.FirstName</td>
        <td>@context.LastName</td>
        <td>@context.Email</td>
    </Cells>
    <EmptyContent>
        <td colspan="4">Could not find any Users</td>
    </EmptyContent>
</RfDataGrid>

@code {

    private GridViewData DataGrid1 { get; set; } = new GridViewData();
    private GridViewData DataGrid2 { get; set; } = new GridViewData();


    public Task LoadData1() => updateDataGrid(DataGrid1);
    public Task LoadData2() => updateDataGrid(DataGrid2);

    private Task updateDataGrid(GridViewData dataGrid)
    {
        var users = getFakeUsers.Get();

        if (dataGrid.Filters.Id.HasValue == true)
            users = users.Where(u => u.Id == dataGrid.Filters.Id);

        if (string.IsNullOrEmpty(dataGrid.Filters.FirstName) == false)
            users = users.Where(u => u.FirstName.Contains(dataGrid.Filters.FirstName));

        if (string.IsNullOrEmpty(dataGrid.Filters.LastName) == false)
            users = users.Where(u => u.LastName.Contains(dataGrid.Filters.LastName));

        if (string.IsNullOrEmpty(dataGrid.Filters.Email) == false)
            users = users.Where(u => u.Email.Contains(dataGrid.Filters.Email));

        if (dataGrid.SortOrder != RfSortOrder.None)
        {
            switch (dataGrid.SortKey)
            {
                case "FirstName":
                    if (dataGrid.SortOrder == RfSortOrder.Ascending)
                        users = users.OrderBy(u => u.FirstName);
                    else
                        users = users.OrderByDescending(u => u.FirstName);
                    break;
                case "LastName":
                    if (dataGrid.SortOrder == RfSortOrder.Ascending)
                        users = users.OrderBy(u => u.LastName);
                    else
                        users = users.OrderByDescending(u => u.LastName);
                    break;
                case "Email":
                    if (dataGrid.SortOrder == RfSortOrder.Ascending)
                        users = users.OrderBy(u => u.Email);
                    else
                        users = users.OrderByDescending(u => u.Email);
                    break;
                case "Id":
                    if (dataGrid.SortOrder == RfSortOrder.Ascending)
                        users = users.OrderBy(u => u.Id);
                    else
                        users = users.OrderByDescending(u => u.Id);
                    break;
            }
        }

        dataGrid.TotalCount = users.Count();

        dataGrid.Users = users
            .Skip(dataGrid.CurrentPageIndex * dataGrid.PageSize)
            .Take(dataGrid.PageSize)
            .ToList();

        return Task.CompletedTask;
    }

    private void OnRowDoubleClick(UserRowData user)
    {
        // Handle double click event for the user row
        Console.WriteLine($"Double clicked on user: {user.FirstName} {user.LastName}");
    }

    private class FilterData
    {
        public int? Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
    }
    private class GridViewData
    {
        public int TotalCount { get; set; }
        public int PageSize { get; set; } = 10;
        public int CurrentPageIndex { get; set; }
        public RfSortOrder SortOrder { get; set; }
        public string SortKey { get; set; }

        public FilterData Filters { get; set; } = new FilterData();
        public List<UserRowData> Users { get; set; }

    }

}
