@using RForgeDocs.Client.Components
@using System.Text

@if (PageSourceUrl != null)
{
    <HeroSection Title="@Title" SubTitle="@SubTitle">

        <HeroFooter>
            <div class="container has-text-right">
                <a class="button is-primary mb-3" href="@PageSourceUrl">
                    <span>Page Source Code</span>
                    <span class="icon">
                        <i class="fas fa-up-right-from-square"></i>
                    </span>
                </a>
            </div>
        </HeroFooter>

    </HeroSection>
}
else
{
    <HeroSection Title="@Title" SubTitle="@SubTitle" />
}

<div class="container">
    <div class="breadcrumb mt-2" aria-label="breadcrumbs">
        <ul>
            <li><a href="/">RForge</a></li>
            <li><a href="/component-listing">Components</a></li>
            <li><a href="@ComponentDetailsUrl">@ComponentName</a></li>
            <li class="is-active"><a href="#" aria-current="page">Playground</a></li>
        </ul>
    </div>

    <div class="columns is-align-content-stretch">
        <div class="column is-4">
            <div class="message">
                <p class="message-header">Parameters</p>
                <div class="message-body">
                    @Parameters
                </div>
            </div>
        </div>

        <div class="column">

            @if (MakeDisplaySticky == true)
            {
                <article class="section is-position-sticky" style="top: 80px;">
                    @Display
                </article>

            }
            else
            {
                <article class="section">
                    @Display
                </article>
            }


            @if (HasEvents == true)
            {
                <div class="section">
                    <div class="field">
                        <div class="level">
                            <div class="level-left">
                                <div class="level-item">
                                    <label class="label">Event Log</label>
                                </div>
                            </div>
                            <div class="level-right">
                                <div class="level-item">
                                    <a class="button" @onclick=@ClearLog>Clear Logs</a>
                                </div>
                            </div>
                        </div>
                        <div class="control">
                            <textarea class="textarea is-family-monospace is-small"
                                      placeholder="Event Log"
                                      readonly="readonly"
                                      rows="15">
                                @for (int i = log.Count - 1; i >= 0; i--)
                                {
                                    @log[i]
                                }</textarea>
                        </div>
                    </div>
                </div>
            }
        </div>


    </div>


</div>


@code {

    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string SubTitle { get; set; }

    [Parameter]
    public string PageSourceUrl { get; set; }

    [Parameter]
    public string ComponentDetailsUrl { get; set; }

    [Parameter]
    public string ComponentName { get; set; }

    [Parameter]
    public RenderFragment Parameters { get; set; }

    [Parameter]
    public RenderFragment Display { get; set; }

    [Parameter]
    public bool MakeDisplaySticky { get; set; } = true;

    [Parameter]
    public bool HasEvents { get; set; } = true;


    private List<string> log { get; set; } = new List<string>();

    public void ClearLog() => log.Clear();

    public void AddLog(string message, bool addTimeStamp = true)
    {
        string line = "";

        if (addTimeStamp == true)
            line = $"[{DateTime.Now:T}] ";

        line += $"{message}\n";

        log.Add(line);

    }

}
